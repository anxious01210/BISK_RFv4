# Generated by Django 5.2.5 on 2025-09-09 20:35

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduler', '0018_runnerheartbeat_min_face_px'),
    ]

    operations = [
        migrations.AddField(
            model_name='cameraresourceoverride',
            name='crop_format',
            field=models.CharField(blank=True, choices=[('jpg', 'JPEG'), ('png', 'PNG')], default='', help_text='Image format for saved face crops from this camera.', max_length=8),
        ),
        migrations.AddField(
            model_name='cameraresourceoverride',
            name='crop_jpeg_quality',
            field=models.PositiveSmallIntegerField(blank=True, help_text='JPEG quality (1–100) for this camera’s saved crops (ignored for PNG).', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='cameraresourceoverride',
            name='min_face_px',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Minimum face-box size (pixels) for this camera. Overrides global/default.', null=True),
        ),
        migrations.AddField(
            model_name='cameraresourceoverride',
            name='model_tag',
            field=models.CharField(blank=True, choices=[('buffalo_l', 'buffalo_l'), ('antelopev2', 'antelopev2')], default='', help_text="Override ArcFace model just for this camera (e.g., 'antelopev2' for stronger recognition).", max_length=32),
        ),
        migrations.AddField(
            model_name='cameraresourceoverride',
            name='pipe_mjpeg_q',
            field=models.PositiveSmallIntegerField(blank=True, help_text='FFmpeg MJPEG quality for the frame pipe (1=best, 31=worst) for this camera only.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)]),
        ),
        migrations.AddField(
            model_name='cameraresourceoverride',
            name='quality_version',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Optional camera-specific tuning profile (1/2/3…). Blank = inherit.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)]),
        ),
        migrations.AddField(
            model_name='cameraresourceoverride',
            name='save_debug_unmatched',
            field=models.BooleanField(blank=True, help_text='If True, save unmatched crops for tuning/debug for this camera only; if False, never save; if blank, inherit.', null=True),
        ),
        migrations.AddField(
            model_name='globalresourcesettings',
            name='crop_format',
            field=models.CharField(blank=True, choices=[('jpg', 'JPEG'), ('png', 'PNG')], default='', help_text='Default image format for saved face crops. Leave blank to inherit runner default.', max_length=8),
        ),
        migrations.AddField(
            model_name='globalresourcesettings',
            name='crop_jpeg_quality',
            field=models.PositiveSmallIntegerField(blank=True, help_text='JPEG quality (1–100) for saved crops when format=JPEG. Higher = larger file. Ignored for PNG.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='globalresourcesettings',
            name='min_face_px_default',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Global minimum face-box size in pixels required to process a detection. Raise to reduce false matches from tiny/far faces; lower to catch smaller faces.', null=True),
        ),
        migrations.AddField(
            model_name='globalresourcesettings',
            name='model_tag',
            field=models.CharField(blank=True, choices=[('buffalo_l', 'buffalo_l'), ('antelopev2', 'antelopev2')], default='', help_text="Default face model to use (e.g., 'buffalo_l' for speed or 'antelopev2' for stronger quality). Blank = runner default.", max_length=32),
        ),
        migrations.AddField(
            model_name='globalresourcesettings',
            name='pipe_mjpeg_q',
            field=models.PositiveSmallIntegerField(blank=True, help_text='FFmpeg MJPEG quality for the live frame pipe (1=best, 31=worst). Lower gives sharper frames but higher CPU/bitrate. Typical: 2.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)]),
        ),
        migrations.AddField(
            model_name='globalresourcesettings',
            name='quality_version',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Optional tuning profile version for end-to-end heuristics (e.g., 1/2/3). Runner may use this to switch thresholds/filters. Null = runner default.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)]),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='cpu_affinity',
            field=models.CharField(blank=True, help_text="CSV of CPU core indexes (e.g., '0,1,2'). Empty = no pinning.", max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='cpu_nice',
            field=models.IntegerField(blank=True, help_text='Process niceness (lower = higher priority). Example: 10 for background.', null=True),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='cpu_quota_percent',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Per-process CPU throttle target. 100 = no cap.', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='det_set_max',
            field=models.CharField(blank=True, help_text="Upper bound to clamp detector size for this camera (e.g., '1024'). Blank = inherit.", max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='device',
            field=models.CharField(blank=True, choices=[('', '(inherit)'), ('cpu', 'CPU'), ('cuda', 'CUDA')], help_text='Override compute device for this camera (cpu/cuda).', max_length=8, null=True),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='gpu_index',
            field=models.CharField(blank=True, help_text="Single or CSV for multi-GPU; e.g. '0' or '0,1'.", max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='gpu_memory_fraction',
            field=models.FloatField(blank=True, help_text='Torch-only per-process memory fraction (0.05–1.0).', null=True, validators=[django.core.validators.MinValueValidator(0.05), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='gpu_target_util_percent',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Runner attempts to keep GPU util near this via FPS throttling.', null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='hwaccel',
            field=models.CharField(blank=True, choices=[('', '(inherit)'), ('none', 'none'), ('nvdec', 'nvdec')], help_text='Override video decode accel for this camera (nvdec/none).', max_length=8, null=True),
        ),
        migrations.AlterField(
            model_name='cameraresourceoverride',
            name='max_fps',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Hard cap for this camera’s effective FPS (after downsampling). Blank = inherit.', null=True),
        ),
    ]
