# Generated by Django 5.2.5 on 2025-09-05 17:12

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('attendance', '0015_recognitionsettings_changed_at'),
    ]

    operations = [
        migrations.AlterField(
            model_name='attendanceevent',
            name='crop_path',
            field=models.CharField(blank=True, default='', help_text='MEDIA-relative path of the face crop saved for this event (if any).', max_length=300),
        ),
        migrations.AlterField(
            model_name='attendanceevent',
            name='score',
            field=models.FloatField(help_text='Similarity score for this event (0.00–1.00; higher means more similar to the enrolled embedding).'),
        ),
        migrations.AlterField(
            model_name='attendanceevent',
            name='ts',
            field=models.DateTimeField(help_text='Timestamp (timezone-aware) when this event was generated.'),
        ),
        migrations.AlterField(
            model_name='attendancerecord',
            name='best_crop',
            field=models.CharField(blank=True, default='', help_text='MEDIA-relative path of the best face crop for this record.', max_length=300),
        ),
        migrations.AlterField(
            model_name='attendancerecord',
            name='best_score',
            field=models.FloatField(help_text='Highest similarity score observed during this record’s time window.'),
        ),
        migrations.AlterField(
            model_name='attendancerecord',
            name='sightings',
            field=models.PositiveIntegerField(default=1, help_text='How many frames contributed to this record (debounced within the window).'),
        ),
        migrations.AlterField(
            model_name='attendancerecord',
            name='status',
            field=models.CharField(default='present', help_text='Computed attendance status for the period (e.g., present/late/absent).', max_length=16),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='changed_at',
            field=models.DateTimeField(auto_now=True, help_text='Auto-updated change marker. Runners poll this field and hot-reload settings within a few seconds after you save.'),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='delete_old_cropped',
            field=models.BooleanField(default=False, help_text='If ON, old cropped face images will be deleted automatically to save disk space. Turn OFF if you need to keep historical crops for audit/debug.'),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='max_periods_per_day',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Optional cap on how many periods can count as ‘present’ per student per day. Leave blank for no limit. Example: 1 = only the first recognized period counts.', null=True),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='min_face_px',
            field=models.PositiveIntegerField(default=40, help_text='Reject faces smaller than this many pixels (shortest side of the face bounding box) before scoring. Use this to control the ‘working distance’: higher = requires closer/bigger faces (fewer false accepts), lower = allows farther/smaller faces (more recalls). Guideline for 1440p streams: 36–48 px ≈ ~4–6 m with good optics/bitrate.'),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='min_improve_delta',
            field=models.FloatField(default=0.01, help_text='Within the debounce window, only update best_seen if the new score improves the previous best by at least this amount. Example: 0.02 avoids churn from tiny score fluctuations.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='min_score',
            field=models.FloatField(default=0.75, help_text='Minimum similarity score (0.00–1.00) required to accept a match. Raise this to reduce false accepts; lower it to recognize faces at longer distances or in poor lighting. Typical range: 0.50–0.85. Default 0.75.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='re_register_window_sec',
            field=models.PositiveIntegerField(default=10, help_text='Debounce window in seconds per student. During this window, repeated detections of the same person on the same camera/period will not create new records; we only update last_seen/best_seen. Prevents duplicate ‘pops’ when a person stays in view.'),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='save_all_crops',
            field=models.BooleanField(default=False, help_text='If ON, save every detected face crop (matched and unmatched). Useful for tuning but increases disk usage and I/O. If OFF, only matched/best crops are saved.'),
        ),
        migrations.AlterField(
            model_name='recognitionsettings',
            name='use_cosine_similarity',
            field=models.BooleanField(default=True, help_text='Similarity metric preference. Cosine similarity (ON) is the default and recommended. Note: current runtime uses cosine regardless; this flag is reserved for future switching.'),
        ),
        migrations.AlterField(
            model_name='student',
            name='first_name',
            field=models.CharField(blank=True, default='', help_text='Given name.', max_length=100),
        ),
        migrations.AlterField(
            model_name='student',
            name='h_code',
            field=models.CharField(help_text='Human/School code (unique student identifier, e.g., H123456).', max_length=32, unique=True),
        ),
        migrations.AlterField(
            model_name='student',
            name='last_name',
            field=models.CharField(blank=True, default='', help_text='Family name / surname.', max_length=100),
        ),
        migrations.AlterField(
            model_name='student',
            name='middle_name',
            field=models.CharField(blank=True, default='', help_text='Middle name(s), if any.', max_length=100),
        ),
    ]
