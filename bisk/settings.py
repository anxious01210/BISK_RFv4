"""
Django settings for bisk project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import warnings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-md1r9447^$2n&fef8smsfzo_t34b%vu1(fjlmrmrf9=kz!(nf-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

INSTALLED_APPS += [
    "import_export",
    "rest_framework",
    "django_filters",
    "apps.cameras",
    "apps.scheduler",
    # If INSTALLED_APPS has "apps.attendance", Django uses a default AppConfig and will not execute our ready() logic that auto‑creates media folders.
    "apps.attendance.apps.AttendanceConfig",
    # "apps.attendance",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bisk.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.debug',
                'django.template.context_processors.static',
                'django.template.context_processors.media',  # ← add this, If you prefer to keep {{ MEDIA_URL }} working in all templates
            ],
        },
    },
]

WSGI_APPLICATION = 'bisk.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "bisk",
        "USER": "bisk",
        "PASSWORD": "DiagonalDB1!",
        "HOST": "127.0.0.1",
        "PORT": "5432",
        "CONN_MAX_AGE": 60,
        "OPTIONS": {"sslmode": "prefer"},
    },
    # 'sqlite3': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 50,
}

RUN_APSCHEDULER = False  # we’ll enable later; cron fallback will still work
# Heartbeat endpoint used by runner processes
# RUNNER_HEARTBEAT_URL = "http://127.0.0.1:8000/api/runner/heartbeat/"

# Use the standard Ubuntu locations
FFPROBE_PATH = "/usr/bin/ffprobe"
FFMPEG_PATH = "/usr/bin/ffmpeg"
FFPLAY_PATH = "/usr/bin/ffplay"

# Fail fast if missing (can be skipped with an env flag)
# This will stop any Django command (runserver, migrate, etc.) if a binary is missing—which is usually what you want on a Linux-only deployment.
# If you occasionally want to skip the hard check (e.g., in CI), run with:
# BISK_STRICT_BINARIES=0 python manage.py runserver


if os.environ.get("BISK_STRICT_BINARIES", "1") == "1":
    for _p in (FFPROBE_PATH, FFMPEG_PATH, FFPLAY_PATH):
        if not os.path.exists(_p):
            raise RuntimeError(f"Required binary not found: {_p}")

RUNNER_HEARTBEAT_URL = os.getenv("BISK_HEARTBEAT_URL", "http://127.0.0.1:8000/api/runner/heartbeat/")
RUNNER_HEARTBEAT_KEY = os.getenv("BISK_HEARTBEAT_KEY", "dev-key-change-me")  # set long random in prod

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = "Asia/Baghdad"

USE_I18N = True

# if the server time is in UTC and TZ aware, then the time will be saved in UTC in the DB,
# you also need to set the TIME_ZONE here to the correct IANA TZ name
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # for collectstatic in prod
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # python manage.py findstatic attendance/crop_modal.js -v 2
]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# --- Snapshots (for thumbnails written by FFmpeg runners) ---
SNAPSHOT_DIR = MEDIA_ROOT / "snapshots"
SNAPSHOT_DIR.mkdir(parents=True, exist_ok=True)  # ensure exists at startup

# --- Runner selection ---
# Toggle which Python runner script Enforcer should launch.
# "ffmpeg_all" = extras/recognize_runner_all_ffmpeg.py (preferred)
# "ffmpeg_one" = extras/recognize_runner_ffmpeg.py     (compat)
RUNNER_IMPL = os.getenv("BISK_RUNNER_IMPL", "ffmpeg_all")  # ffmpeg_all | ffmpeg

# Explicit script paths (overrideable via env if you relocate)
RUNNER_SCRIPT_ALL = BASE_DIR / "extras" / "recognize_runner_all_ffmpeg.py"
RUNNER_SCRIPT_ONE = BASE_DIR / "extras" / "recognize_runner_ffmpeg.py"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Heartbeat cadence & status thresholds (seconds)
# The runner heartbeats will tick every HEARTBEAT_INTERVAL_SEC seconds.
# Snapshots will be taken every HEARTBEAT_SNAPSHOT_EVERY heartbeats.
# The admin status badges will flip between Online/Stale/Offline based on HEARTBEAT_STALE_SEC and HEARTBEAT_OFFLINE_SEC.

# Match the runner’s cadence used by the enforcer defaults
DEFAULT_HB_INTERVAL = 10
# Base interval the UI/admin assumes
HEARTBEAT_INTERVAL_SEC = 10
# Badges (must be increasing: online < stale < offline)
HEARTBEAT_ONLINE_SEC = 15  # ≈ 1.5 × interval
HEARTBEAT_STALE_SEC = 45
HEARTBEAT_OFFLINE_SEC = 120
# How often to allow a row in RunnerHeartbeat (for the admin list/dashboard)
HB_LOG_EVERY_SEC = 10
# Optional: default snapshot cadence (used by enforcer resolve_knob)
DEFAULT_SNAPSHOT_EVERY = 30

# HEARTBEAT_INTERVAL_SEC = int(os.getenv("HEARTBEAT_INTERVAL_SEC", "30"))
# HEARTBEAT_STALE_SEC = int(os.getenv("HEARTBEAT_STALE_SEC", "40"))
# HEARTBEAT_OFFLINE_SEC = int(os.getenv("HEARTBEAT_OFFLINE_SEC", "60"))
# In Django Admin → Scheduler → Runner Heartbeats, the online/stale/offline labels come from your:
HEARTBEAT_THRESHOLDS = {"online": HEARTBEAT_INTERVAL_SEC, "stale": HEARTBEAT_STALE_SEC,
                        "offline": HEARTBEAT_OFFLINE_SEC}

# (optional) how often to take a snapshot
HEARTBEAT_SNAPSHOT_EVERY = int(os.getenv("HEARTBEAT_SNAPSHOT_EVERY", "60"))  # 15

# Auto-delete RunningProcess rows that have been Offline for longer than this many minutes (preferred) and fallback hours
RUNPROC_PRUNE_OFFLINE_MINUTES = 6
RUNPROC_PRUNE_OFFLINE_HOURS = 1

# --- BISK enforcer/scheduler ---
ENFORCER_INTERVAL_SECONDS = int(os.getenv("ENFORCER_INTERVAL_SECONDS", "60"))
# Online threshold used by admin; stale/offline use the constants above.
# HEARTBEAT_ONLINE_SEC = int(os.getenv("HEARTBEAT_ONLINE_SEC", str(max(45, HEARTBEAT_INTERVAL_SEC * 3 // 2))))

# HB_LOG_EVERY_SEC = int(os.getenv("HB_LOG_EVERY_SEC", "10"))  # rate-limit RunnerHeartbeat inserts

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "KEY_PREFIX": "bisk",
    }
}

# Keep just one lock path (env can override)
ENFORCER_LOCK_FILE = os.getenv("ENFORCER_LOCK_FILE", "/run/bisk/enforcer.lock")

# ---------------------------
# Face detection & scoring
# ---------------------------
# Start detection here for both scoring and embedding (square size).
FACE_DET_SIZE_DEFAULT = 640

# Only escalate if the current detection looks weak for that image.
# Prefer multiples of 32 for speed/tiling. Tweak to your GPU/CPU.
FACE_DET_CASCADE_SIZES = [736, 800, 960, 1024, 1280, 1536]

# Escalation policy thresholds
FACE_DET_MIN_CONF = 0.30  # escalate if conf < this
FACE_DET_MIN_FRAC = 0.04  # escalate if min(face_w,face_h)/min(img_w,img_h) < this
FACE_DET_GOOD_CONF = 0.45  # stop early if conf >= this and frac >= FACE_DET_MIN_FRAC
FACE_DET_MAX_ESCL_STEPS = 5
FACE_DET_ALLOW_CPU_FALLBACK = True  # retry once on CPU if very large sizes hit GPU OOM/provider errors

# Score on the detected face ROI (fallback to whole image if no face found)
FACE_SCORE_USE_FACE_ROI = True
FACE_SCORE_ROI_MARGIN = 0.20  # 20% padding around face box when scoring
FACE_SCORE_WEIGHTS = {"sharp": 0.7, "bright": 0.3}
FACE_SCORE_NORMALIZE = "pctl"  # "minmax" or "pctl" (10th–90th percentile robust scaling)
FACE_SCORE_EPSILON = 0.05  # soften extremes when galleries are tiny

# Intake cropping (optional; used by sort_gallery_intake)
FACE_INTAKE_CROP_FACES = False  # set True to emit cropped faces during intake
FACE_INTAKE_CROP_MARGIN = 0.20
FACE_INTAKE_SAVE_ORIGINAL = True
FACE_INTAKE_CROP_DIR_NAME = "faces"
FACE_INTAKE_JPEG_QUALITY = 92

FACE_INTAKE_ENHANCE = False  # default off; enable per-run with --enhance or admin action
FACE_ENHANCE_BRIGHT_TARGET = 0.60  # target mean in [0..1] on face ROI
FACE_ENHANCE_ALPHA_LIMITS = (0.6, 1.8)  # gain clamp for brightness normalize
FACE_ENHANCE_CLAHE_CLIP = 2.0  # CLAHE strength on L channel
FACE_ENHANCE_CLAHE_TILE = 8  # tile grid (tile x tile)
FACE_ENHANCE_SHARP_AMOUNT = 0.5  # unsharp mask strength (0..1.5)
FACE_ENHANCE_SHARP_SIGMA = 1.0

# Selection policy defaults for admin modal/CLI fallbacks
EMBEDDING_DEFAULT_K = 3
EMBEDDING_MIN_SCORE_DEFAULT = 0.50
EMBEDDING_STRICT_TOP_DEFAULT = True

# # ---- Embedding defaults / UI caps ----
# # Embedding pipeline defaults
# EMBEDDING_DEFAULT_K = 3  # default K if not provided
# EMBEDDING_MIN_SCORE = 0.55  # 0..1 on our normalized combined score
#
EMBEDDING_DEFAULT_DET_SIZE = 1024  # 640, 1024, etc.
EMBEDDING_LIST_MAX_THUMBS = 3  # cap thumbs in admin list (omit/None to show exactly K)
EMBEDDING_USE_STRICT_TOP = True  # drop images below the score floor

# Default: 100
# The maximum number of files that may be received via POST in a multipart/form-data encoded request before a SuspiciousOperation (TooManyFiles) is raised. You can set this to None to disable the check. Applications that are expected to receive an unusually large number of file fields should tune this setting.
# The number of accepted files is correlated to the amount of time and memory needed to process the request. Large requests could be used as a denial-of-service attack vector if left unchecked. Since web servers don’t typically perform deep request inspection, it’s not possible to perform a similar check at that level.
DATA_UPLOAD_MAX_NUMBER_FILES = 2000
DATA_UPLOAD_MAX_NUMBER_SIZE_IN_BYTES = 1024 * 5000
# 1) Always stream file uploads to disk (never keep in RAM)
FILE_UPLOAD_MAX_MEMORY_SIZE = 0

# 2) Where to write temp upload chunks (pick a large, fast disk/partition)
# Point Django’s temp upload dir at your existing media tree path
FILE_UPLOAD_TEMP_DIR = MEDIA_ROOT / "upload_tmp"  # matches DIRS["UPLOAD_TMP"]

# 3) Allow many files in one request (multi-file input repeats the same key)
DATA_UPLOAD_MAX_NUMBER_FIELDS = 2000  # default is 1000

# 4) (Optional) Non-file POST data kept in memory before streaming
# Not a cap—just a memory threshold. Leave default or tune if you like.
# DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB


# ---- Attendance score bands & colors ----
# Bands are inclusive at the lower bound.
#   RED:    score  < orange_min
#   ORANGE: score >= orange_min and < yellow_min
#   YELLOW: score >= yellow_min and < green_min
#   GREEN:  score >= green_min

ATTENDANCE_SCORE_BANDS = {
    "green_min": 0.80,
    "yellow_min": 0.65,
    "orange_min": 0.50,
}

# Tailwind-ish, readable on dark UIs
ATTENDANCE_COLOR_GREEN = "#22c55e"  # green-500
ATTENDANCE_COLOR_YELLOW = "#facc15"  # yellow-400
ATTENDANCE_COLOR_ORANGE = "#f59e0b"  # orange-500
ATTENDANCE_COLOR_RED = "#ef4444"  # red-500
